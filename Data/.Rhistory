d_wide$scale_ThaiAZQTAQScore_6months  <- 27 - d_wide$scale_ThaiAZQTAQScore_6months
d_wide$scale_ThaiAZQTAQScore_12months <- 27 - d_wide$scale_ThaiAZQTAQScore_12months
MODELS <- list()
FORMULA <- c()
##-- To save the results
forest_values <- as.data.frame(matrix(nrow=0,ncol=7))                                    # To save treatment_allocation
forest_values_covariates0 <- list(as.data.frame(matrix(nrow=0,ncol=7)))
forest_values_covariates <- rep(forest_values_covariates0,length(COVARIATES_wo_SCALE)+1) # To save other covariates (+1 to include the baseline scale)
for(i in 1:length(CONT_SCALES)){
##-- COVARIATES
scale <- CONT_SCALES[i]
COVARIATES <- c(paste0(scale,'_baseline'),COVARIATES_wo_SCALE) # With scale
COVARIATES_LEVELS <- c(list(baseline_scale=paste0(scale,'_baseline')),COVARIATES_LEVELS_wo_SCALE)
##-- Formulas
VAR_ADJUST <- paste(COVARIATES,collapse=' + ')
form_raw_6 <- as.formula(paste0(scale,'_6months~treatment_allocation'))
form_raw_12 <- as.formula(paste0(scale,'_12months~treatment_allocation'))
form_adj_6 <- as.formula(paste0(scale,'_6months~treatment_allocation +',VAR_ADJUST))
form_adj_12 <- as.formula(paste0(scale,'_12months~treatment_allocation +',VAR_ADJUST))
FORMULA <- c(FORMULA,form_raw_6,form_raw_12,form_adj_6,form_adj_12)
##-- Models
mod_raw_6 <- lm(form_raw_6,d_wide)
mod_raw_12 <- lm(form_raw_12,d_wide)
mod_adj_6 <- lm(form_adj_6,d_wide)
mod_adj_12 <- lm(form_adj_12,d_wide)
MODELS <- c(MODELS,list(mod_raw_6,mod_raw_12,mod_adj_6,mod_adj_12))
##-- 95%CI treatment allocation
forest_values <- rbind(forest_values,
get_mod_info(mod_raw_6, scale,6, 'raw'),
get_mod_info(mod_raw_12,scale,12,'raw'),
get_mod_info(mod_adj_6, scale,6, 'adjusted'),
get_mod_info(mod_adj_12,scale,12,'adjusted'))
##-- 95%CI covariates
for(k in 1:length(COVARIATES)){                # For each covariate
for(j in 1:length(COVARIATES_LEVELS[[k]])){  # For each level of the covariate
forest_values_covariates[[k]] <- rbind(forest_values_covariates[[k]],
get_mod_info(mod_adj_6, scale,6, 'adjusted',coeff=COVARIATES_LEVELS[[k]][j]),
get_mod_info(mod_adj_12,scale,12,'adjusted',coeff=COVARIATES_LEVELS[[k]][j]))
}
}
}
names(forest_values) <- NAMES_FOREST_MATRIX
forest_values$group <- factor(paste0(forest_values$type,' - ',forest_values$time),levels=LEV_FOREST)
forest_values$time <- factor(forest_values$time,levels=c('6 months','12 months'))
forest_values$type <- factor(forest_values$type,levels=c('raw','adjusted'))
forest_values$est <- as.numeric(forest_values$est)
forest_values$low <- as.numeric(forest_values$low)
forest_values$upp <- as.numeric(forest_values$upp)
for(k in 1:length(COVARIATES)){
names(forest_values_covariates[[k]]) <- NAMES_FOREST_MATRIX
forest_values_covariates[[k]]$group <- factor(paste0(forest_values_covariates[[k]]$type,' - ',forest_values_covariates[[k]]$time),levels=LEV_FOREST)
forest_values_covariates[[k]]$time <- factor(forest_values_covariates[[k]]$time,levels=c('6 months','12 months'))
forest_values_covariates[[k]]$type <- factor(forest_values_covariates[[k]]$type,levels=c('raw','adjusted'))
forest_values_covariates[[k]]$est <- as.numeric(forest_values_covariates[[k]]$est)
forest_values_covariates[[k]]$low <- as.numeric(forest_values_covariates[[k]]$low)
forest_values_covariates[[k]]$upp <- as.numeric(forest_values_covariates[[k]]$upp)
}
dig <- 2
SIGNIFICANT <- with(forest_values,ifelse(low*upp>0,'*',''))
forest_values$est_ci <- with(forest_values,
paste0(formatC(est,digits = dig,format='f'),' (',
formatC(low,digits = dig,format='f'),' , ',
formatC(upp,digits = dig,format='f'),')',
SIGNIFICANT))
dd <- dcast(setDT(forest_values), scale ~ time+type, value.var = c('est_ci'))
x <- kable(dd,col.names = c('Scale',rep(c('Raw','Adjusted'),2)),format='latex', booktabs = TRUE,align='lcccc',
caption="Model coefficients for the treatment effect estimation in each scale treated as continuous.") %>%
kable_styling(latex_options = "HOLD_position") %>%
add_header_above(c(" " = 1, "6 months" = 2, "12 months" = 2))
x
ymax <- max(abs(c(forest_values$low,forest_values$upp)))
# Forest plot ------------------------------------------------------------------
ggplot(forest_values,aes(x = group,y = est, ymin = low, ymax = upp)) +
geom_pointrange(aes(col=time,linetype=type)) +
geom_hline(aes(fill=time,linetype=type),yintercept=0, linetype=2) +
ylim(-ymax,ymax) +
xlab('Scale')+ ylab(expression(beta~"(95% Confidence Interval)"))+
geom_errorbar(aes(ymin=low, ymax=upp,col=time,linetype=type),width=0.5,cex=1)+
facet_wrap(~scale,strip.position="left",nrow=7,scales = "free_y") +
theme(plot.title=element_text(size=16,face="bold"),
legend.position = 'top',
legend.title = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_text(face="bold"),
axis.title=element_text(size=12,face="bold"),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold")) +
scale_linetype_manual(values=c(2,1)) +
labs(tag=paste0('Favours Placebo',paste0(rep(' ',15),collapse=''),'Favours Citicoline',paste0(rep(' ',3),collapse=''),
'Favours Placebo',paste0(rep(' ',15),collapse=''),'Favours Citicoline')) +
theme(plot.tag.position = c(.512, .95), plot.tag=element_text(size=11)) +
coord_flip(clip = "off")
N_CONT_SCALES <- length(CONT_SCALES)
UNIQUE_LEVELS <- list(rep(NA, N_CONT_SCALES),
rep(paste0(levels(d_wide$Exercise_baseline)[-1],' (Baseline)'),N_CONT_SCALES),
rep(paste0(levels(d_wide$Meditation_baseline)[-1],' (Baseline)'),N_CONT_SCALES),
rep('Male',N_CONT_SCALES),
rep(NA,N_CONT_SCALES),
rep(rev(levels(d_wide$Educational_level)[-1]),N_CONT_SCALES), # Reverse the levels!!!!
rep(NA,N_CONT_SCALES),
rep(rev(levels(d_wide$smoke_baseline)[-1]),N_CONT_SCALES),
rep(rev(levels(d_wide$alcohol_baseline)[-1]),N_CONT_SCALES))
TABLE_SEP <- list('\\addlinespace',
c('','','\\addlinespace'),
c('','','\\addlinespace'),
'\\addlinespace',
'\\addlinespace',
c('','\\addlinespace'),
'\\addlinespace',
c('','\\addlinespace'),
c('','\\addlinespace'))
for(k in 1:length(forest_values_covariates)){
cat("\n &nbsp; ", LAB_COVARIATES[k], "\n &nbsp; \n")
SIGNIFICANT <- with(forest_values_covariates[[k]],ifelse(low*upp>0,'*',''))
forest_values_covariates[[k]]$est_ci <- with(forest_values_covariates[[k]],
paste0(formatC(est,digits = dig,format='f'),' (',
formatC(low,digits = dig,format='f'),' , ',
formatC(upp,digits = dig,format='f'),')',
SIGNIFICANT))
dd <- dcast(setDT(forest_values_covariates[[k]]), scale + var ~ time , value.var = c('est_ci'))
HEADER <- c(4); names(HEADER) <- c(LAB_COVARIATES[k])
dd$var <- UNIQUE_LEVELS[[k]]
x <- kable(dd,col.names = c('Scale','Level','6 months','12 months'), booktabs = T,linesep=TABLE_SEP[[k]],align='lcccc',
caption=paste("Model coefficients for the",LAB_COVARIATES[k],"covariate")) %>%
kable_styling(latex_options = "HOLD_position") %>%
add_header_above(HEADER)
print(x)
cat(INT_CONT[[k]],'\n')
cat('\n\n<!-- -->\n\n')
cat("\n\n \\newpage \n\n")
}
# For descriptive graphics
d_long_non_inverted <- d_long
d_wide_non_inverted <- d_wide
# Invert TGDS scale to made it comparable with other scales --> The greater the value, the better the health status
d_long$scale_TGDS <- 30-d_long$scale_TGDS
d_long$scale_ThaiAZQCaregiver <- 48-d_long$scale_ThaiAZQCaregiver
d_long$scale_ThaiAZQTAQScore <- 27-d_long$scale_ThaiAZQTAQScore
d_long$id <- as.factor(d_long$id)
MODELS <- list()
FORMULA <- c()
##-- To save the results
forest_values <- as.data.frame(matrix(nrow=0,ncol=7))                                    # To save treatment_allocation
forest_values_covariates0 <- list(as.data.frame(matrix(nrow=0,ncol=7)))
forest_values_covariates <- rep(forest_values_covariates0,length(COVARIATES_wo_SCALE)+1) # To save other covariates (+1 to include the baseline scale)
# forest_values <- as.data.frame(matrix(nrow=0,ncol=6))
for(i in 1:length(CONT_SCALES)){
##-- COVARIATES---------------------------------------------------------------
scale <- CONT_SCALES[i]
COVARIATES <- c(COVARIATES_LONG) # With scale
COVARIATES_LEVELS <- c(list(COVARIATES_LEVELS_LONG))
##-- Formulas ----------------------------------------------------------------
VAR_ADJUST <- paste(COVARIATES,collapse=' + ')
form_raw <- as.formula(paste0(scale,'~treatment_allocation * time_cont + (time_cont|id)'))
form_adj <- as.formula(paste0(scale,'~treatment_allocation * time_cont + (time_cont|id) +',VAR_ADJUST))
FORMULA <- c(FORMULA,form_raw,form_adj)
##-- Models ------------------------------------------------------------------
mod_raw <- lmer(form_raw,d_long)
mod_adj <- lmer(form_adj,d_long)
MODELS  <- c(MODELS,list(mod_raw,mod_adj))
##-- 95%CI
##-- Forest plot -------------------------------------------------------------
forest_values <- rbind(forest_values,
get_mod_info(mod_raw, scale, time=NA, type='raw',
coeff='treatment_allocationCiticoline:time_cont'),
get_mod_info(mod_adj, scale, time=NA, type='adjusted',
coeff='treatment_allocationCiticoline:time_cont'))
}
names(forest_values) <- NAMES_FOREST_MATRIX
forest_values$group <- factor(forest_values$type,levels=levels(forest_values$type))
forest_values$time  <- factor(forest_values$time,levels=c('long','6 months','12 months'))
forest_values$type  <- factor(forest_values$type,levels=c('raw','adjusted'))
forest_values$est   <- 365*as.numeric(forest_values$est)
forest_values$low   <- 365*as.numeric(forest_values$low)
forest_values$upp   <- 365*as.numeric(forest_values$upp)
ymax <- max(abs(c(forest_values$low,forest_values$upp)))
# Forest plot
ggplot(forest_values,aes(x = type, y = est, ymin = low, ymax = upp)) +
geom_pointrange(aes(linetype=type)) +
geom_hline(aes(linetype=type),yintercept=0, linetype=2) +
ylim(-ymax,ymax) +
xlab('Scale')+ ylab(expression(beta~"(95% Confidence Interval)"))+
geom_errorbar(aes(ymin=low, ymax=upp,linetype=type),width=0.5,cex=1)+
facet_wrap(~scale,strip.position="left",nrow=7,scales = "free_y") +
theme(plot.title=element_text(size=16,face="bold"),
legend.position = 'top',
legend.title = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_text(face="bold"),
axis.title=element_text(size=12,face="bold"),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold")) +
scale_linetype_manual(values=c(2,1)) +
labs(tag=paste0('Favours Placebo',paste0(rep(' ',15),collapse=''),'Favours Citicoline',paste0(rep(' ',5),collapse=''),
'Favours Placebo',paste0(rep(' ',15),collapse=''),'Favours Citicoline')) +
theme(plot.tag.position = c(.52, .94), plot.tag=element_text(size=11)) +
# annotate("text", x = 5, y = -5, label = c("Favors Citicoline")) +
# annotate("text", x = 5, y = 5, label = c("Favors Placebo")) +
# geom_text(data = ann_text,label = "Favours citicoline",fontface="bold") +
coord_flip(clip = "off")
dig <- 2
forest_values$est_ci <- with(forest_values,paste0(formatC(est,digits = dig,format='f'),' (',
formatC(low,digits = dig,format='f'),' , ',
formatC(upp,digits = dig,format='f'),' )'))
dd <- dcast(setDT(forest_values), scale ~ type, value.var = c('est_ci'))
kable(dd,col.names = c('Scale','Raw','Adjusted'), booktabs = T,linesep='\\addlinespace',align='lcccc', caption="Raw and adjusted estimations of the Citicoline effect for the random effects model") %>%
kable_styling() %>%
add_header_above(c(" " = 1, "Citicoline" = 2))
cat('\n &nbsp; \n\n')
ss="0-10"
MODELS <- list()
FORMULA <- c()
forest_values <- as.data.frame(matrix(nrow=0,ncol=7))                                    # To save treatment_allocation
forest_values_covariates0 <- list(as.data.frame(matrix(nrow=0,ncol=7)))
forest_values_covariates <- rep(forest_values_covariates0,length(COVARIATES_wo_SCALE)+1) # To save other covariates (+1 to include the baseline scale)
for(i in 1:length(CONT_SCALES)){
print(i)
##-- COVARIATES
scale <- CONT_SCALES[i]
COVARIATES <- c(COVARIATES_LONG) # With scale
COVARIATES_LEVELS <- c(list(COVARIATES_LEVELS_LONG))
##-- Formulas
VAR_ADJUST <- paste(COVARIATES,collapse=' + ')
form_raw <- as.formula(paste0(scale,'~treatment_allocation * time_cont + (time_cont|id)'))
form_adj <- as.formula(paste0(scale,'~treatment_allocation * time_cont + (time_cont|id) +',VAR_ADJUST))
FORMULA <- c(FORMULA,form_raw,form_adj)
##-- Models
sel_id <- d_long$id[d_long$scale_catMOCA==ss & d_long$time=="Baseline"]
mod_raw <- lmer(form_raw, d_long[d_long$id %in% sel_id,])
mod_adj <- lmer(form_adj, d_long[d_long$id %in% sel_id,])
MODELS <- c(MODELS,list(mod_raw,mod_adj))
##-- 95%CI
# mod=mod_raw
# coeff='treatment_allocationCiticoline'
# scale='TGDS'
# type='raw'
# time=NA
forest_values <- rbind(forest_values,
get_mod_info(mod_raw, scale, time=NA, type='raw',
coeff='treatment_allocationCiticoline:time_cont'),
get_mod_info(mod_adj, scale, time=NA, type='adjusted',
coeff='treatment_allocationCiticoline:time_cont'))
}
##-- COVARIATES
scale <- CONT_SCALES[i]
COVARIATES <- c(COVARIATES_LONG) # With scale
COVARIATES_LEVELS <- c(list(COVARIATES_LEVELS_LONG))
##-- Formulas
VAR_ADJUST <- paste(COVARIATES,collapse=' + ')
form_raw <- as.formula(paste0(scale,'~treatment_allocation * time_cont + (time_cont|id)'))
form_raw
form_adj <- as.formula(paste0(scale,'~treatment_allocation * time_cont + (time_cont|id) +',VAR_ADJUST))
form_adj
FORMULA <- c(FORMULA,form_raw,form_adj)
FORMULA
##-- Models
sel_id <- d_long$id[d_long$scale_catMOCA==ss & d_long$time=="Baseline"]
sel_id
table(d_long$scale_catMOCA)
library(factoextra)
library(ggplot2)
library(ggpubr)
library(knitr)
library(kableExtra)
library(FactoMineR)
library(data.table)
library(lme4)
library(equatiomatic)
library(RColorBrewer)
library(tidyverse)
library(readxl)
library(data.table)
# library(summarytools)
##-- Knitr options -------------------------------------------------------------
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(fig.pos = 'H')
options(knitr.kable.NA = '')
##-- Load data and scripts -----------------------------------------------------
load('../Datos derivados/datos.RData')
source('../Scripts R/parameters.R')
source('new_parameters.R') # Add some parameters to the the first script parameters
source('../Scripts R/functions.R')
source('interpretation_covariates.R')
table(d_wide$scale_catMOCA_baseline,d_wide$scale_catTMSE_baseline)
sum(d_wide$scale_catMOCA_baseline=='11-20')
sum(d_wide$scale_catMOCA_baseline=='0-10')
d <- read.table('R Sports Packages.csv',sep=',')
rm(list=ls())
setwd('C:/Users/jcortes/My Drive/Recerca/R Packages/GITHUB/CRAN_R_Sports_Packages/Data')
d <- read.table('R Sports Packages.csv',sep=',')
dim(d)
rm(list=ls())
setwd('C:/Users/jcortes/My Drive/Recerca/R Packages/GITHUB/CRAN_R_Sports_Packages/Data')
d <- read.table('R Sports Packages.csv',sep=',',header = TRUE)
dim(d)
View(d)
dnew <- read.table('csv_github_wirh_short_description.csv',sep=';',header = TRUE)
dnew <- read.table('csv_github_wirh_short_description.csv',sep=';',header = TRUE,quote = "'")
dnew <- read.table('csv_github_wirh_short_description.csv',sep=';',header = TRUE,quote = "\'")
dnew <- read.table('csv_github_wirh_short_description.csv',sep=';',header = TRUE,quote = "\'")
dnew <- read.table('csv_github_wirh_short_description.csv',sep=';',header = TRUE,quote = "")
dnew <- read.table('csv_github_wirh_short_description.csv',sep=';',header = TRUE,quote = '"')
dim(dnew)
dim(d)
write.table(dnew,file = 'R Sports Packages_new.csv',quote = TRUE,row.names = FALSE,col.names = TRUE,sep = ',')
dnew$Description2 <- gsub('"','',dnew$Description,fixed = TRUE)
View(dnew['Description','Description2'],'d')
View(dnew[,c('Description','Description2')],'d')
rm(list=ls())
setwd('C:/Users/jcortes/My Drive/Recerca/R Packages/GITHUB/CRAN_R_Sports_Packages/Data')
d <- read.table('R Sports Packages.csv',sep=',',header = TRUE)
dnew <- read.table('csv_github_wirh_short_description.csv',sep=';',header = TRUE,quote = '"')
dim(d)
dim(dnew)
dnew$Description <- gsub('"','',dnew$Description,fixed = TRUE)
View(dnew[,c('Description','Description2')],'d')
write.table(dnew,file = 'R Sports Packages_new.csv',quote = TRUE,row.names = FALSE,col.names = TRUE,sep = ',')
rm(list=ls())
# Aquest script fa que el fitxer de Marti es pugui veure a Github
setwd('C:/Users/jcortes/My Drive/Recerca/R Packages/Revision/Scripts/Change csv for github')
dnew <- read.table('csv_github_wirh_short_description.csv',sep=';',header = TRUE,quote = '"')
dim(dnew)
dnew$Description <- gsub('"','',dnew$Description,fixed = TRUE)
View(dnew[,c('Description','Description2')],'d')
setwd('C:/Users/jcortes/My Drive/Recerca/R Packages/GITHUB/CRAN_R_Sports_Packages/Data')
write.table(dnew,file = 'R Sports Packages.csv',quote = TRUE,row.names = FALSE,col.names = TRUE,sep = ',')
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6762152/
# https://www.rdocumentation.org/packages/mltools/versions/0.3.5/topics/mcc
library(mltools)
d <- read_excel("C:/Users/jcortes/My Drive/Recerca/R Packages/data_agreement.xlsx")
d <- read_excel("C:/Users/jcortes/My Drive/Recerca/R Packages/datasets/data_agreement.xlsx")
names(d)[names(d)=="Paquete de deportes de R-Víctor"] <- 'rev1'
names(d)[names(d)=="Paquete de deportes de R-Martí"] <- 'rev2'
names(d)[names(d)=="Paquete de deportes de R-Validación"] <- 'rev3'
d$rev1 <- factor(d$rev1)
d$rev2 <- factor(d$rev2)
d$rev3 <- factor(d$rev3)
summary(d)
df_rev1 <- data.frame(Yes = d$rev1=='Yes',
No = d$rev1=='No',
Doubt = d$rev1=='Doubt')
df_rev2 <- data.frame(Yes = d$rev2=='Yes',
No = d$rev2=='No',
Doubt = d$rev2=='Doubt')
mcc_obj <- mcc(preds = df_rev1, actuals = df_rev2)
mcc_obj
df_rev1
n <- nrow(d)
n
mcc_obj
MCC
n_boot <- 100
n <- nrow(d)
MCC <- c()
for(i in 1:n_boot){
print(i)
sel <- sample(1:n,n,rep=TRUE)
df1 <- df_rev1[sel,]
df2 <- df_rev2[sel,]
MCC[i] <- mcc(preds = df1, actuals = df2)
}
quantile(MCC,c(0.025,0.975))
n_boot <- 1000
n <- nrow(d)
MCC <- c()
for(i in 1:n_boot){
print(i)
sel <- sample(1:n,n,rep=TRUE)
df1 <- df_rev1[sel,]
df2 <- df_rev2[sel,]
MCC[i] <- mcc(preds = df1, actuals = df2)
}
quantile(MCC,c(0.025,0.975))
# https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6762152/
# https://www.rdocumentation.org/packages/mltools/versions/0.3.5/topics/mcc
library(mltools)
d <- read_excel("C:/Users/jcortes/My Drive/Recerca/R Packages/datasets/data_agreement.xlsx")
names(d)[names(d)=="Paquete de deportes de R-Víctor"] <- 'rev1'
names(d)[names(d)=="Paquete de deportes de R-Martí"] <- 'rev2'
names(d)[names(d)=="Paquete de deportes de R-Validación"] <- 'rev3'
d$rev1 <- factor(d$rev1)
d$rev2 <- factor(d$rev2)
d$rev3 <- factor(d$rev3)
summary(d)
df_rev1 <- data.frame(Yes = d$rev1=='Yes',
No = d$rev1=='No',
Doubt = d$rev1=='Doubt')
df_rev2 <- data.frame(Yes = d$rev2=='Yes',
No = d$rev2=='No',
Doubt = d$rev2=='Doubt')
mcc_obj <- mcc(preds = df_rev1, actuals = df_rev2)
mcc_obj
# Confidence interval Bootstrap
set.seed(12345)
n_boot <- 1000
n <- nrow(d)
MCC <- c()
for(i in 1:n_boot){
print(i)
sel <- sample(1:n,n,rep=TRUE)
df1 <- df_rev1[sel,]
df2 <- df_rev2[sel,]
MCC[i] <- mcc(preds = df1, actuals = df2)
}
quantile(MCC,c(0.025,0.975))
library(sos)
sports <- findFn('sports')
football <- findFn('football')
basketball <- findFn('basketball')
soccer <- findFn('soccer')
tennis <- findFn('tennis')
volleyball <- findFn('volleyball')
handball <- findFn('handball')
water_polo <- findFn('water polo')
hockey <- findFn('hockey')
baseball <- findFn('baseball')
martial <- findFn('martial')
judo <- findFn('judo')
sumo <- findFn('sumo')
taekwondo <- findFn('taekwondo')
karate <- findFn('karate')
aikido <- findFn('aikido')
jujutsu <- findFn('jujutsu')
kendo <- findFn('kendo')
capoeira <- findFn('capoeira')
athletics <- findFn('athletics')
running <- findFn('running') #care with not sports packages
jumping <- findFn('jumping')
climbing <- findFn('climbing')
swimming <- findFn('swimming')
throwing <- findFn('throwing')
walking <- findFn('walking')
cycling <- findFn('cycling')
riding <- findFn('riding')
surfing <- findFn('surfing')
racing <- findFn('racing')
diving <- findFn('diving')
archery <- findFn('archery')
rugby <- findFn('rugby')
badminton <- findFn('badminton')
cricket <- findFn('cricket')
croquet <- findFn('croquet')
softball <- findFn('softball')
chess <- findFn('chess')
futsal <- findFn('futsal')
golf <- findFn('golf')
squash <- findFn('squash')
polo <- findFn('polo')
paddle <- findFn('paddle')
gymnastics <- findFn('gymnastics')
alpinism <- findFn('alpinism')
skiing <- findFn('skiing')
wrestling <- findFn('wrestling')
boxing <- findFn('boxing')
calisthenics <- findFn('calisthenics')
curling <- findFn('curling')
javelin <- findFn('javelin')
marathon <- findFn('marathon')
darts <- findFn('darts')
nfl <- findFn('NFL');
nba <- findFn('NBA')
mlb <- findFn('MLB')
nhl <- findFn('NHL')
mls <- findFn('MLS')
acb <- findFn('ACB')
liga <- findFn('liga')
league <- findFn('league')
ligue <- findFn('ligue')
calcio <- findFn('calcio')
serie_a <- findFn('serie A')
f1 <- findFn('f1')
moto_gp <- findFn('moto gp')
nascar <- findFn('nascar')
champions <- findFn('champions')
uefa <- findFn('uefa')
olympics <- findFn('olympics')
game <- findFn('game')#care with not sports packages
player <- findFn('player')
accelerometer <- findFn('accelerometer')
ball <- findFn('ball')#care with not sports packages
team <- findFn('team')
cup <- findFn('cup')#care with not sports packages
score <- findFn('score')#care with not sports packages
tournament <- findFn('tournament')
kayak <- findFn('kayak')
canoe <- findFn('canoe')
racket <- findFn('racket')
fifa <- findFn('fifa')
fiba <- findFn('fiba')
espn <- findFn('espn')
athlon <- findFn('athlon')
ncaa <- findFn("ncaa")
all <- sports | football | basketball | soccer | tennis | volleyball | handball | water_polo | hockey | baseball |
martial | judo | sumo | taekwondo | karate | aikido | jujutsu | kendo | capoeira | athletics| running |
jumping | climbing | swimming | throwing | walking | cycling | riding | surfing | racing | diving |
archery | rugby | badminton | cricket | croquet | softball | chess | futsal | golf | squash | polo |
paddle | gymnastics | alpinism | skiing | wrestling | boxing | calisthenics | curling | javelin | marathon |
darts | nfl | nba | mlb | nhl | mls | acb | liga | league | ligue | calcio | serie_a | f1 | moto_gp |
nascar | champions | uefa | olympics | game | player | accelerometer | ball | team | cup | score |
tournament | kayak | canoe | racket | fifa | fiba | espn | athlon | ncaa
pkgs_list    <- unique(all$Package)   # Unique packages
pkgs_list
length(pkgs_list)
rm(list=ls())
library(ggplot2)
library(ggpubr)
library(readxl)
##-- Read data
# Paquets creats de sports
d <- read_excel("C:/Users/jcortes/My Drive/Recerca/R Packages/Datasets/Revisió_paquets_R_definitiu.xlsx",sheet = "def")
ddd <- read.csv("C:/Users/jcortes/My Drive/Recerca/R Packages/Scripts/To know R packages per year/results3.csv")
